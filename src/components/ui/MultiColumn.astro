---
import type { HTMLAttributes } from 'astro/types';

export interface Props extends HTMLAttributes<'div'> {
  /**
   * Number of columns
   * - 2: Two column layout (default)
   * - 3: Three column layout
   */
  columns?: 2 | 3;

  /**
   * Column ratio - determines the width split between columns
   * - 'equal': 50/50 split for 2 columns, 33/33/33 for 3 columns (default)
   * - 'left-wide': 60/40 split (2 columns only)
   * - 'right-wide': 40/60 split (2 columns only)
   */
  ratio?: 'equal' | 'left-wide' | 'right-wide';

  /**
   * Gap size between columns
   * - 'sm': small gap (1rem)
   * - 'md': medium gap (2rem) - default
   * - 'lg': large gap (3rem)
   * - 'xl': extra large gap (4rem)
   */
  gap?: 'sm' | 'md' | 'lg' | 'xl';

  /**
   * Breakpoint at which columns stack vertically
   * - 'sm': 640px
   * - 'md': 768px (default)
   * - 'lg': 1024px
   */
  breakpoint?: 'sm' | 'md' | 'lg';

  /**
   * Additional CSS classes
   */
  class?: string;
}

const {
  columns = 2,
  ratio = 'equal',
  gap = 'md',
  breakpoint = 'md',
  class: className,
  ...rest
} = Astro.props;

// Map gap to spacing classes
const gapClasses = {
  'sm': 'gap-4',
  'md': 'gap-8',
  'lg': 'gap-12',
  'xl': 'gap-16',
};

// Map breakpoint to responsive prefix
const breakpointMap = {
  'sm': 'sm',
  'md': 'md',
  'lg': 'lg',
};

// Get the appropriate grid class based on columns, ratio and breakpoint
const getGridClass = () => {
  const bp = breakpointMap[breakpoint];

  if (columns === 3) {
    // 3 column layout - always equal width
    return `grid-cols-1 ${bp}:grid-cols-3`;
  }

  // 2 column layouts
  if (ratio === 'equal') {
    return `grid-cols-1 ${bp}:grid-cols-2`;
  } else if (ratio === 'left-wide') {
    return `grid-cols-1 ${bp}:grid-cols-5`;
  } else {
    return `grid-cols-1 ${bp}:grid-cols-5`;
  }
};

// Get column span classes for asymmetric layouts (2 columns only)
const getColumnSpans = () => {
  if (columns === 3) {
    return { left: '', center: '', right: '' };
  }

  if (ratio === 'left-wide') {
    return {
      left: `${breakpointMap[breakpoint]}:col-span-3`,
      right: `${breakpointMap[breakpoint]}:col-span-2`,
    };
  } else if (ratio === 'right-wide') {
    return {
      left: `${breakpointMap[breakpoint]}:col-span-2`,
      right: `${breakpointMap[breakpoint]}:col-span-3`,
    };
  }
  return { left: '', right: '' };
};

const columnSpans = getColumnSpans();
---

<div
  class:list={[
    'grid',
    getGridClass(),
    gapClasses[gap],
    className
  ]}
  {...rest}
>
  <div class:list={['multi-column-left', columnSpans.left]}>
    <slot name="left">
      <slot name="column-1" />
    </slot>
  </div>

  {columns === 3 && (
    <div class:list={['multi-column-center', columnSpans.center]}>
      <slot name="center">
        <slot name="column-2" />
      </slot>
    </div>
  )}

  <div class:list={['multi-column-right', columnSpans.right]}>
    <slot name="right">
      {columns === 3 ? <slot name="column-3" /> : <slot name="column-2" />}
    </slot>
  </div>
</div>
